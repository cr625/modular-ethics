# coding: utf-8

"""
    ITM TA3 API

    This is the specification of the TA3 API for In The Moment (ITM).  Currently, the Evaluation API for TA2 supports functionality for the Phase 1 Evaluation.  The API is based on the OpenAPI 3.0.3 specification.

    The version of the OpenAPI document: 0.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from .probe_responses import ProbeResponses
from typing import Optional, Set
from typing_extensions import Self

class Tagging(BaseModel):
    """
    Scene-level tagging configuration
    """ # noqa: E501
    enabled: Optional[StrictBool] = Field(default=None, description="Whether tagging is enabled for the scene")
    repeatable: Optional[StrictBool] = Field(default=None, description="Whether probe responses should be sent each time a new tag is applied")
    probe_responses: Optional[List[ProbeResponses]] = Field(default=None, description="A list of probe responses to send TA1 for each character-tag combination")
    reference: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Re-use the tagging configuration from the specified scene index")
    __properties: ClassVar[List[str]] = ["enabled", "repeatable", "probe_responses", "reference"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Tagging from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in probe_responses (list)
        _items = []
        if self.probe_responses:
            for _item_probe_responses in self.probe_responses:
                if _item_probe_responses:
                    _items.append(_item_probe_responses.to_dict())
            _dict['probe_responses'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Tagging from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enabled": obj.get("enabled"),
            "repeatable": obj.get("repeatable"),
            "probe_responses": [ProbeResponses.from_dict(_item) for _item in obj["probe_responses"]] if obj.get("probe_responses") is not None else None,
            "reference": obj.get("reference")
        })
        return _obj


