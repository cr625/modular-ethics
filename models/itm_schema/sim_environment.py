# coding: utf-8

"""
    ITM TA3 API

    This is the specification of the TA3 API for In The Moment (ITM).  Currently, the Evaluation API for TA2 supports functionality for the Phase 1 Evaluation.  The API is based on the OpenAPI 3.0.3 specification.

    The version of the OpenAPI document: 0.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from .ambient_noise_enum import AmbientNoiseEnum
from .fauna_type_enum import FaunaTypeEnum
from .flora_type_enum import FloraTypeEnum
from .lighting_type_enum import LightingTypeEnum
from .peak_noise_enum import PeakNoiseEnum
from .sim_environment_type_enum import SimEnvironmentTypeEnum
from .terrain_type_enum import TerrainTypeEnum
from .visibility_type_enum import VisibilityTypeEnum
from .weather_type_enum import WeatherTypeEnum
from typing import Optional, Set
from typing_extensions import Self

class SimEnvironment(BaseModel):
    """
    Environmental elements that impact simulation configuration
    """ # noqa: E501
    unstructured: Optional[StrictStr] = Field(default=None, description="Natural language, plain text description of the environment")
    type: SimEnvironmentTypeEnum
    weather: Optional[WeatherTypeEnum] = None
    terrain: Optional[TerrainTypeEnum] = None
    flora: Optional[FloraTypeEnum] = None
    fauna: Optional[FaunaTypeEnum] = None
    temperature: Optional[Union[Annotated[float, Field(le=150.0, strict=True, ge=-75.0)], Annotated[int, Field(le=150, strict=True, ge=-75)]]] = Field(default=None, description="numerical temperature in degrees Fahrenheit")
    humidity: Optional[Union[Annotated[float, Field(le=100.0, strict=True, ge=0.0)], Annotated[int, Field(le=100, strict=True, ge=0)]]] = Field(default=None, description="Numerical relative humidity, in percentage")
    lighting: Optional[LightingTypeEnum] = None
    visibility: Optional[VisibilityTypeEnum] = None
    noise_ambient: Optional[AmbientNoiseEnum] = None
    noise_peak: Optional[PeakNoiseEnum] = None
    __properties: ClassVar[List[str]] = ["unstructured", "type", "weather", "terrain", "flora", "fauna", "temperature", "humidity", "lighting", "visibility", "noise_ambient", "noise_peak"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SimEnvironment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SimEnvironment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "unstructured": obj.get("unstructured"),
            "type": obj.get("type"),
            "weather": obj.get("weather"),
            "terrain": obj.get("terrain"),
            "flora": obj.get("flora"),
            "fauna": obj.get("fauna"),
            "temperature": obj.get("temperature"),
            "humidity": obj.get("humidity"),
            "lighting": obj.get("lighting"),
            "visibility": obj.get("visibility"),
            "noise_ambient": obj.get("noise_ambient"),
            "noise_peak": obj.get("noise_peak")
        })
        return _obj


