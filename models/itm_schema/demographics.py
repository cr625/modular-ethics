# coding: utf-8

"""
    ITM TA3 API

    This is the specification of the TA3 API for In The Moment (ITM).  Currently, the Evaluation API for TA2 supports functionality for the Phase 1 Evaluation.  The API is based on the OpenAPI 3.0.3 specification.

    The version of the OpenAPI document: 0.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from .character_role_enum import CharacterRoleEnum
from .demographic_sex_enum import DemographicSexEnum
from .military_branch_enum import MilitaryBranchEnum
from .military_disposition_enum import MilitaryDispositionEnum
from .military_rank_enum import MilitaryRankEnum
from .military_rank_title_enum import MilitaryRankTitleEnum
from .mission_importance_enum import MissionImportanceEnum
from .race_enum import RaceEnum
from .skills import Skills
from typing import Optional, Set
from typing_extensions import Self

class Demographics(BaseModel):
    """
    Basic properties about the character
    """ # noqa: E501
    age: Optional[Annotated[int, Field(le=125, strict=True, ge=0)]] = Field(default=None, description="the age of the character, omit if unknown")
    sex: DemographicSexEnum
    race: RaceEnum
    military_disposition: Optional[MilitaryDispositionEnum] = None
    military_branch: Optional[MilitaryBranchEnum] = None
    rank: Optional[MilitaryRankEnum] = None
    rank_title: Optional[MilitaryRankTitleEnum] = None
    skills: Optional[List[Skills]] = Field(default=None, description="A list of pairs of skill type and descriptive skill level")
    role: Optional[CharacterRoleEnum] = None
    mission_importance: Optional[MissionImportanceEnum] = MissionImportanceEnum.NORMAL
    __properties: ClassVar[List[str]] = ["age", "sex", "race", "military_disposition", "military_branch", "rank", "rank_title", "skills", "role", "mission_importance"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Demographics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in skills (list)
        _items = []
        if self.skills:
            for _item_skills in self.skills:
                if _item_skills:
                    _items.append(_item_skills.to_dict())
            _dict['skills'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Demographics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "age": obj.get("age"),
            "sex": obj.get("sex"),
            "race": obj.get("race"),
            "military_disposition": obj.get("military_disposition"),
            "military_branch": obj.get("military_branch"),
            "rank": obj.get("rank"),
            "rank_title": obj.get("rank_title"),
            "skills": [Skills.from_dict(_item) for _item in obj["skills"]] if obj.get("skills") is not None else None,
            "role": obj.get("role"),
            "mission_importance": obj.get("mission_importance") if obj.get("mission_importance") is not None else MissionImportanceEnum.NORMAL
        })
        return _obj


