# coding: utf-8

"""
    ITM TA3 API

    This is the specification of the TA3 API for In The Moment (ITM).  Currently, the Evaluation API for TA2 supports functionality for the Phase 1 Evaluation.  The API is based on the OpenAPI 3.0.3 specification.

    The version of the OpenAPI document: 0.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from .action_mapping import ActionMapping
from .action_type_enum import ActionTypeEnum
from .conditions import Conditions
from .probe_config import ProbeConfig
from .semantic_type_enum import SemanticTypeEnum
from .state import State
from .tagging import Tagging
from typing import Optional, Set
from typing_extensions import Self

class Scene(BaseModel):
    """
    the specification for a scene in the scenario
    """ # noqa: E501
    id: StrictStr = Field(description="The scene ID, unique throughout the scenario")
    state: Optional[State] = None
    next_scene: Optional[StrictStr] = Field(default=None, description="The ID of the default next scene in the scenario; if empty or missing, then by default this is the last scene.")
    end_scene_allowed: StrictBool = Field(description="Whether ADMs can explicitly end the scene")
    persist_characters: Optional[StrictBool] = Field(default=None, description="Whether characters should persist from the previous scene")
    removed_characters: Optional[List[StrictStr]] = Field(default=None, description="List of character ids to be removed from the scene")
    probe_config: Optional[List[ProbeConfig]] = Field(default=None, description="TA1-provided probe configuration, ignored by TA3")
    tagging: Optional[Tagging] = None
    action_mapping: List[ActionMapping] = Field(description="List of actions with details of how those actions map to probe responses")
    restricted_actions: Optional[List[ActionTypeEnum]] = Field(default=None, description="List of actions that will be excluded from get_available_actions")
    transition_semantics: Optional[SemanticTypeEnum] = SemanticTypeEnum.AND
    transitions: Optional[Conditions] = None
    __properties: ClassVar[List[str]] = ["id", "state", "next_scene", "end_scene_allowed", "persist_characters", "removed_characters", "probe_config", "tagging", "action_mapping", "restricted_actions", "transition_semantics", "transitions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Scene from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of state
        if self.state:
            _dict['state'] = self.state.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in probe_config (list)
        _items = []
        if self.probe_config:
            for _item_probe_config in self.probe_config:
                if _item_probe_config:
                    _items.append(_item_probe_config.to_dict())
            _dict['probe_config'] = _items
        # override the default output from pydantic by calling `to_dict()` of tagging
        if self.tagging:
            _dict['tagging'] = self.tagging.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in action_mapping (list)
        _items = []
        if self.action_mapping:
            for _item_action_mapping in self.action_mapping:
                if _item_action_mapping:
                    _items.append(_item_action_mapping.to_dict())
            _dict['action_mapping'] = _items
        # override the default output from pydantic by calling `to_dict()` of transitions
        if self.transitions:
            _dict['transitions'] = self.transitions.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Scene from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "state": State.from_dict(obj["state"]) if obj.get("state") is not None else None,
            "next_scene": obj.get("next_scene"),
            "end_scene_allowed": obj.get("end_scene_allowed"),
            "persist_characters": obj.get("persist_characters"),
            "removed_characters": obj.get("removed_characters"),
            "probe_config": [ProbeConfig.from_dict(_item) for _item in obj["probe_config"]] if obj.get("probe_config") is not None else None,
            "tagging": Tagging.from_dict(obj["tagging"]) if obj.get("tagging") is not None else None,
            "action_mapping": [ActionMapping.from_dict(_item) for _item in obj["action_mapping"]] if obj.get("action_mapping") is not None else None,
            "restricted_actions": obj.get("restricted_actions"),
            "transition_semantics": obj.get("transition_semantics") if obj.get("transition_semantics") is not None else SemanticTypeEnum.AND,
            "transitions": Conditions.from_dict(obj["transitions"]) if obj.get("transitions") is not None else None
        })
        return _obj


