# coding: utf-8

"""
    ITM TA3 API

    This is the specification of the TA3 API for In The Moment (ITM).  Currently, the Evaluation API for TA2 supports functionality for the Phase 1 Evaluation.  The API is based on the OpenAPI 3.0.3 specification.

    The version of the OpenAPI document: 0.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from .aid_type_enum import AidTypeEnum
from .military_disposition_enum import MilitaryDispositionEnum
from typing import Optional, Set
from typing_extensions import Self

class Aid(BaseModel):
    """
    Properties related to evacuation, available hospitals, or other forms of aid
    """ # noqa: E501
    id: StrictStr = Field(description="An identifier for the aid opportunity, unique within the scene")
    delay: Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]] = Field(description="Time until aid is available, in minutes; 0 means ready now")
    type: Optional[AidTypeEnum] = None
    role: Optional[Annotated[int, Field(le=4, strict=True, ge=1)]] = Field(default=None, description="The characterization of health support for the distribution of medical resources and capabilities; Role 1 has higher capability than Role 4. See [health.mil](https://health.mil/Reference-Center/Glossary-Terms/2018/06/22/Roles-of-Medical-Care) ")
    patients_treated: Optional[List[MilitaryDispositionEnum]] = Field(default=None, description="A list of types of patients that can be helped; if omitted, then no restrictions or restrictions are irrelevant")
    max_transport: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="Maximum number of casualties that can be accommodated")
    __properties: ClassVar[List[str]] = ["id", "delay", "type", "role", "patients_treated", "max_transport"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Aid from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Aid from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "delay": obj.get("delay"),
            "type": obj.get("type"),
            "role": obj.get("role"),
            "patients_treated": obj.get("patients_treated"),
            "max_transport": obj.get("max_transport")
        })
        return _obj


